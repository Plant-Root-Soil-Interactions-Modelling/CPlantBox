The vtk_plot.py file in "src\python_modules" has been modified to provide backend features.

The function that have been modified are: plot_plant; create_leaf; plot_roots.



** def plot_roots() modifications:

->adding a vtkOBJwriter that will create a file called "extractSurface.obj" in the same directory as the main file requesting the functions.
This file contains the tubes embodying the structure of the plant (not the leaves, the leaves will be created in the "create_leaf" function).



** def plot_plant() modifications:

->adding parameters: printout = False, outputDirectory = "output/", timestamp = False, date = "", sim_name = "", GraphicalAccuracy = False, ExtraParam = None, NormalsZValue = [],LeafSurfaceList = [],Thickness = False

printout = False: this variable is the main toggle of the whole backend needed for the module. If this is not set to "True" the module does nothing.
Also, toggling on this parameter disables the correct rendering in the render window. The code has been built in such a way that the polydata needs 
to be refreshed at each segment. Thus removing the ability of the code to simply append the data.  The parameter GraphicalAccuracy = False, corrects that if set to True.
The files created each contain the information relative to their names. The first kind is "LeafOBJ_0_0.obj", those files contain the informations of a given segment
of a given leaf. The "_0_0" part of the name tells you with the first number which leaf it is and the second number the current segment of the leaf.
The numbers both begin at "0". So the "_0_0" is actually the first leaf and its first segment.
Each "_x_0" segment is actually a line and doesn't have a width ("stem" of the leaf).

outputDirectory = "output/": allows the user to create (if not already present) a folder to store the different files created by the module.
By default, it will create a folder next to the main code (the one pulling the requests to vtk_plot.py and not next to vtk_plot.py).

timestamp = False: This parameter will change how file are stored and named. If toggled off, the files in "ouputDirectory" will be overwritten at each simulation and have the same names.
If toggled on, the files will be copied and stored in a sub folder of "output/" in "output/stored/". The filenames will be modified to have attached to them the date and time
in the real world (not the simulation time). The date-time format is as follows (year + "-" + month + "-" + day + "_" + hour + "h" + minute + "min"+ second + "s"+).
This date format is hardcoded but the user can insert in the "date" parameter anything he wants in input to overwrite.

date = "": This parameter, if not left blank and "timestamp" is set to true, will provide the user the ability to write the desired date the user wants and thus the format.
This parameter has to be a string.

sim_name = "": This parameter allows the user to add a simulation name to the folders if the "timestamp" parameter is set to true. 
If a simulation name is given, a sub folder in the "stored" folder will be created containing the sub folders of that simulation name.

ExtraParam = None: Simply allows the user to apply any values he desires either on the stem and/or leaves.
The first input is the name, the second the stem values (in a list format) and the third is the leaves values (also in list format).
Ex.:
ExtraParam = [	["Irradiance", Irradiance_Stem, Irradiance_Leaf] , 
		["Value", Value_Stem, Value_Leaf], 
		["IDs", ID_Stem, ID_Leaf]]
This parameter allows to input multiple data sets and the user will only have to change the name of the data he wants to show in the "plot_plant" function.

NormalsZValue = []: This parameter allows the retrieval of the Z values of the normals of each segment of each leaf

LeafSurfaceList = []: Retrieves the surfaces of each quadrilateral of each segment of each leaf

Thickness = False: Creates thick leaves in the UI and also ".obj" as the "LeafOBJ" ones. Those are named "LeafThicknessOBJ".

** def create_leaf() modifications:

->adding parameters: LeafSegIDList = [], QuadCounterList = [],k = 0, printout = False, outputDirectory = "output/", timestamp = False, date = "", sim_name = "", NormalsZValue = [], LeafSurfaceList = [], Thickness = False, OutPut = []
printout = False, outputDirectory = "output/", timestamp = False, date = "", sim_name = "", NormalsZValue = [], LeafSurfaceList = [], Thickness = False : cf. "plot_plant" function.

LeafSegIDList = []: This parameter will create a python list variable containing the IDs of the segments of the leaves. This can be done outside of this definition.
It is left inside for debugging.

QuadCounterList = []: This parameter will create a python list variable containing the number of quadrilateral create per segment of the leaves. 
This can be done outside of this definition. It is left inside for debugging.
k = 0: This parameter sets the number of the current leaf being processed.

OutPut = []: Retrieves the extruded leaves data. Those are only computed if "Thickness" and "printout" are set to True.
This is an internal data. It is not meant to go outside of the vtk_plot.py file.


** def segs_to_polydata() modifications:

->adding parameters: printout = False, outputDirectory = "output/", timestamp = False, date = "", sim_name = ""
printout = False, outputDirectory = "output/", timestamp = False, date = "", sim_name = "", ExtraParam = None : cf. "plot_plant" function.


** def create_scalar_bar():

->adding parameters: RangeOverwrite = None

RangeOverwrite = None: This parameter will simply overwrite the range if given a value range. Ex.: [X1, x2]


** def plot_roots():

->adding parameters: ReturnLut = False, RangeExtra = None

ReturnLut = False: This parameter returns the Look Up Table created inside of plot_roots to overwrite it with the data range of the leaves.

RangeExtra = None: Contains the range from the leaves data.
This will overwrite the normal range (only the stem value range) with the stem value range and the leave value range.
Thus taking the biggest boundary range within those two ranges (stem and leaf value ranges). 














